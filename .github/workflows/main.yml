name: Publish Ninbubs Event bus package

on:
  push:
    tags:
      - '*'
    branches: ['master']
  pull_request:
    branches: ['master']
  release:
    types:
      - published # Run the workflow when a new GitHub release is published
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  PROJECT_PATH: ./src/Ninbus.EventBus/Ninbus.EventBus.csproj

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore --configuration Release

  run-tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Run Tests
        run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect:"XPlat Code Coverage" --settings tests/Ninbus.EventBus.Test/coverlet.runsettings
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.2.0
        with:
          filename: tests/Ninbus.EventBus.Test/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

  publish:
    runs-on: ubuntu-latest
    needs: [build, run-tests]
    steps:
      - name: Install dotnet tool
        run: dotnet tool install -g dotnetCampus.TagToVersion
      - name: Set tag to version
        run: dotnet TagToVersion -t ${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Create NuGet package
        run: dotnet pack ${{ env.PROJECT_PATH }} --configuration Release -o out
      - name: Publish Package
        run: |
          cd out 
          dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
